----------------------------------------------------------------------------------------
1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678
         1         2         3         4         5         6         7         8
----------------------------------------
------------------
123456789012345678
------------------
----------------------------------------
----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------
Youtube tuts

    watched Python playlist
https://www.youtube.com/playlist?list=PL0Zuz27SZ-6MQri81d012LwP5jvFZ_scc
  .currently at: 

    watched Git
https://www.youtube.com/playlist?list=PL0Zuz27SZ-6PkWWk_mA2vkimUTJf81mNz

----------------------------------------
READ / WATCHED

------------------
  Basic Bash Commands
https://medium.com/geekculture/basic-bash-commands-c54933183c89

------------------
  Python AI: How to Build a Neural Network & Make Predictions
https://realpython.com/python-ai-neural-network/


----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------
Bash basic

    go to home directory
$ cd

    go to folderA
$ cd folderA

    go back to previous change directory:
$ cd ..

    display what type of terminal language
$ echo $0

    display all previously commands used
$ history

    list files & folders at current directory:
$ ls

    copy file/directory into directory;
At current directory, there existed, file newText.txt and folder newFolder;
Copying newText.txt into newFolder:
$ cp

    list files & folders at current directory, including hidden:
$ ls -a

    make directory; creating folder, in this case, newFolder:
$ mkdir newFolder

    move file from one place to another;
At current directory, there existed, file newText.txt and folder newFolder;
Moving newText.txt into newFolder:
.
$ mv newText.txt newFolder

    (print working directory) display current directory:
$ pwd

    remove a file; in this case, newText.txt
$ rm newText.txt

    remove directory; in this case, newFolder
$ rmdir newFolder

    create file; in this case, newText.txt:
$ touch newText.txt


----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------

----------------------------------------
Getting started with Git

------------------
  tutorial followed:
https://www.youtube.com/playlist?list=PL0Zuz27SZ-6PkWWk_mA2vkimUTJf81mNz
  Prerequisite:
installed Git and VSCode


----------------------------------------
Link local project folder to a newly created repo on your acc.

    in VSCode, in terminal Bash, navigate to project folder
$ git init

    make modification inside project folder;
    displaying status of each files in project folder;
    'A' added
    'M' modified
    'U' untracked
$ git status

    staging all (indicated by '.') files, to be ready for commit
$ git add .

    committing with "message"
$ git commit -m "here, message for this commit"

    log onto github.com
    create a new repository, name the repo and leave everthing default

    follow 3rd option,
    "... or push an existing repository from the command line"
    which are:
$ git remote add origin https://github.com/userName/project-u-named.git
$ git branch -M main
$ git push -u origin main

    **** this may not happen if credential setup with Github done prior ****
    a popup generated, asking for credential, follow thru it;
    check out the repo on github site, notice the entry of commit excuted
    and its comments; now current directory is tied to the repo created @ github


----------------------------------------
Typical flows using it Git,
after local project folder is linked with Github repo

    when directory are already tied in with repo on github;
    work on project, then use commands:
$ git add .
$ git status
$ git commit -m "blah blah blah message"
$ git push


----------------------------------------
Undo saved file

    restoring file back to the state of its last committed
$ git restore <file>


----------------------------------------
Undo added file

    unstaging file
$ git restore --staged index.html


----------------------------------------
Amending comments, b4 {git push} executed

$ git commit -v --amend
    press 'i'
    then locate the comment and modify it;
    press "Esc" then press [Shift + :];
    now type "wq" (w=write, q=quit), press Enter;
    do
$ git log --oneline
    to verify comments changed


----------------------------------------
Create a branching

    listing of all branches
$ git branch --list

"
    making new branch
$ git branch <myNewBranch>
    switch onto new branch created, myNewBranch
$ git checkout myNewBranch
"
or
"
    making new branch then switch onto it
$ git checkout -b myNewBranch
"


----------------------------------------
Rename a branch (b4 its first push????)

$ git branch -m myNewBranch difBranchName


----------------------------------------
Deleting existing branch

$ git branch -D myNewBranch


----------------------------------------
Merging branch

    merging existing branch, myNewContent, into main
$ git merge myNewContent


----------------------------------------
Restore to a commit, using "revert"

    do
$ git log --oneline

    copy target commit id (tarComId) to be restore back
$ git revert <tarComId>

    entering into unix editing mode
    press [Shift + :], type "wq" (w=write, q=quit), press Enter;

    do
$ git log --oneline
    notice the restoring process is treated as another commit;
    in other words, all the commits after targeted restore point is maintained;


----------------------------------------
Restore to a commit, using "reset", DESTRUCTIVE method

    note that this is a DESTRUCTIVE restoring process, meaning any commits after
    targeted restore point will be delete

$ git log --oneline
    copy target commit id (tarComId) to be restore back
$ git reset <tarComId> --hard


----------------------------------------
----------------------------------------
Git glossary

$ git branch --list
    listing of all branches

$ git log
    details history of commits

$ git log --oneline
    brief history of commits


----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------
Hotkeys in VSCode

  Ctrl /
comment out selected a code block

  Ctrl d
selecting following variable of the same name after the first one selected

  Shift Alt down
copy whole line of code at current location, and paste below

  Alt z
turn on, word wrap

  Windows .
to insert emoji

  Ctrl l
clear git bash terminal screen


----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------
Python...


----------------------------------------
pythonQuirks

- Naming variables and functions are case-sensitive
- strings are immutable
- seems like using Numpy is more optimal for large data set;
  for example 2D array is more efficient in Numpy but all of array elements must be
  of the same data type

----------------------------------------
Lists, Tuple, Dictionaries, Sets
.
Lists [] are array of values.  Tuples () are like List but immutable.  Dictionaries {} are collection of keys/values.  Sets {} store array of element, but each element is unique.


----------------------------------------
List Comprehension

# Given the fruits list, newlist would contain only the fruits with letter 'a' in the name.  
# If trying out codes, use either block1 or block2.
# block1 is normal approach, block2 used list comprehension

fruits = ["apple", "banana", "cherry", "kiwi", "mango"]
newlist = []

# block1
#-----------------
for x in fruits:
  if "a" in x:
    newlist.append(x)
#-----------------

# block2
#-----------------
newlist = [x for x in fruits if "a" in x]
#-----------------

print(newlist)

# block1 and block2 code are equivalent


----------------------------------------
Example of list selection

thislist = ["apple", "banana", "cherry", "orange", "kiwi", "melon", "mango"]
print(thislist[2:5])

# output:
# ['cherry', 'orange', 'kiwi']
#   ind2      ind3	ind4


----------------------------------------
2D array using list comprehension

rows, cols = (3, 5)
arr = [[0 for j in range(cols)] for i in range(rows)]

# accessing array
arr[1][3] = 8

print(str(rows) + " rows")
print(str(cols) + " cols")
print(arr)

# Output:
# 3 rows
# 5 cols
# [[0, 0, 0, 0, 0], [0, 0, 0, 8, 0], [0, 0, 0, 0, 0]]


----------------------------------------
Iterating over 2D array, and replace its element with values from a list

arr = [[1, 2, 3, 4, 5], [3, 4, 5, 6, 7], [5, 6, 7, 8, 9]]
inputs = [1,1,1,1,1,2,2,2,2,2,3,3,3,3,3]

n = 0
for i in range(len(arr)):
  for j in range(len(arr[i])):
    arr[i][j] = inputs[n]
    n += 1
    
print(arr)
# Output:
# [[1, 1, 1, 1, 1], [2, 2, 2, 2, 2], [3, 3, 3, 3, 3]]


----------------------------------------
Iterating over dictionaryto update its value with a list

test_dict = {'aaa' : [1, 2], 'bbb' : [4, 5], 'ccc' : [7, 8]}
lis = [11, 22, 44, 55, 77, 88]

n = 0
for k, l in test_dict.items():
  test_dict[k] = lis[n:n+len(l)]
  n += len(l)

print(test_dict)
# Output:
# {'aaa': [11, 22], 'bbb': [44, 55], 'ccc': [77, 88]}


----------------------------------------
Scope

#-----------------
def myfunc1():

  x = "John"
  
  def myfunc2():
    nonlocal x
    x = "hello"
    
  myfunc2() 
  return x

print(myfunc1())
# Output:
# hello
#-----------------
.
when nested function declared a variable of immediate outer-function to be "nonlocal", that nested function now able to modify targeted variable


#-----------------
x = "awesome"

def myfunc():
  global x
  x = "fantastic"

myfunc()
print("Python is " + x)

# Output:
# Python is fantastic 
#-----------------
.
when a function declared the most outer scope variable "global", that variable are now modifiable by said function


----------------------------------------
Closure:
a function having access to the scope of its parent function even after the parent function has returned


----------------------------------------
Strings formats

#-----------------
trainer = "Ash"
pokeBall = "3"

print("\n" + trainer + " has " + str(pokeBall) + "Poke ball on him.")

message = "\n%s has %s on him." % (trainer, pokeBall)
print(message)

message = "\n{} has {} Poke ball on him.".format(trainer, pokeBall) 
print(message)

message = "\n{trainerz} has {pokeBallz} Poke ball on him.".format(**player) 
print(message)

# output:
#
# Ash has 3 Poke ball on him.
#
# Ash has 3 Poke ball on him.
#
# Ash has 3 Poke ball on him.
#
# Ash has 3 Poke ball on him.
#-----------------


----------------------------------------
f-strings format

#-----------------
for num in range(1, 11):
  print(f"{num} divided by 4.12 is {num / 4.12:.3%}")

# output:
# 1 divided by 4.12 is 24.272%
# 2 divided by 4.12 is 48.544%
# 3 divided by 4.12 is 72.816%
# 4 divided by 4.12 is 97.087%
# 5 divided by 4.12 is 121.359%
# 6 divided by 4.12 is 145.631%
# 7 divided by 4.12 is 169.903%
# 8 divided by 4.12 is 194.175%
# 9 divided by 4.12 is 218.447%
# 10 divided by 4.12 is 242.718%
#-----------------


----------------------------------------
Modules

------------------
to check current version of python type:
py -3 --version

#-----------------
import sys
import random as rdm
from enum import Enum
import myModule
#-----------------

  line1:
load module "sys" into your code

  line2:
"random" module will go by the alias "rdm"

  line3:
from "enum" module, load "Enum" entity

  line4:
this is how to call your own python file (.py) into your code; "myModule" is the filename


------------------
------------------

  codes:
#-----------------
if __name__ == '__main__':
...
#-----------------
place module source code under this conditional to prevent auto processing when it is being imported from elsewhere 


----------------------------------------
Interacting with command line

codes:
#-----------------
def hello(name, lang):
  greetings = {
      "English": "Hello",
      "Spanish": "Hola",
      "Vietnamese": "Xin chao",
  }
  msg = f"{greetings[lang]} {name}!"
  print(msg)


if __name__ == '__main__':
  import argparse

  parser = argparse.ArgumentParser(
    description="Provides a personal greeting."
  )

  parser.add_argument(
    "-n", "--name", metavar="name",
    required=True,
    help="The name of the person to greet."
  )

  parser.add_argument(
    "-l", "--lang", metavar="language",
    required=True, choices=["English", "Spanish", "Vietnamese"],
    help="The language of the greeting."
  )

  args = parser.parse_args()
  hello(args.name, args.lang)
#-----------------

#
# Explanation...
#

------------------
How to use this code

In gitBash or cmd, go to dir that the file (let it be named, asdf.py) of these codes resided.  Type:
py asdf.py -n "Andy" -l "Vietnamese"

Output:
Xin chao Andy!
------------------


----------------------------------------
"16 - Student Challenge"

------------------
To start the game

In gitBash or cmd, go to dir that the file arcade.py resided.  Type:
py asdf.py -n "Andy"


----------------------------------------
----------------------------------------
Higher order functions
.
a function, taking in function as an argument or
returning function

------------------
------------------
Lambda: is an instance of a function
.
#-----------------
squared = lambda num : num * num
#-----------------

is the same as

#-----------------
def squared(num): return num * num
#-----------------


------------------
------------------
Example using Lambda

#-----------------
def funcBuilder(x):
  return lambda num: num + x

addTen = funcBuilder(10)
addTwenty = funcBuilder(20)

print(addTen(7))
print(addTwenty(8))
# Output:
# 17
# 28
#-----------------


------------------
------------------
Higher order function, map
.
executes a specified function for each item in an iterable

#-----------------
numbers = [3, 4, 5]
squared_nums = map(lambda num: num * num, numbers)
print(list(squared_nums))

# Output:
# [9, 16, 25]
#-----------------


------------------
------------------
Higher order function, filter
.
returns an iterator where the items are filtered through a function for true

#-----------------
numbers = [3, 4, 5]
odd_nums = filter(lambda num: num % 2 != 0, numbers)
print(list(odd_nums))

# Output:
# [3, 5]
#-----------------





















